//uygar aras 22103277 lab5 cs224-04


module PipeFtoD(
    input logic [31:0] instr, PcPlus4F,
    input logic EN, clk, reset,	// StallD will be connected as this EN
    output logic [31:0] instrD, PcPlus4D
);

always_ff @(posedge clk, posedge reset) begin
    if (reset) begin
        instrD <= 0;
        PcPlus4D <= 0;
    end else if (EN) begin
        instrD <= instr;
        PcPlus4D <= PcPlus4F;
    end else begin
        instrD <= instrD;
        PcPlus4D <= PcPlus4D;
    end
end

endmodule


// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.
//uygar aras 22103277 lab5 cs224-04module PipeWtoF(
    input logic[31:0] PC,
    input logic EN,
    input logic clk,
    input logic reset,
    output logic[31:0] PCF
);

always_ff @(posedge clk, posedge reset) begin
    if (reset) begin
        PCF <= 0;
    end
    else if (EN) begin
        PCF <= PC;
    end
    // You can remove this else statement because it has no effect
end
endmodule

module PipeFtoD(input logic[31:0] instrF, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk, posedge reset)
                  if(reset)
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else if(EN)
                        begin
                          if(clear)
                            begin
                          instrD <= 0;
                          PcPlus4D <= 0;
                            end
                          else
                            begin
                        instrD<=instrF;
                        PcPlus4D<=PcPlus4F;
                            end
                        end

               
endmodule


//uygar aras 22103277 lab5 cs224-04

module PipeDtoE(input logic clr, clk, reset, RegWriteD, MemtoRegD, MemWriteD,
                input logic[2:0] AluControlD,
                input logic AluSrcD, RegDstD, BranchD,
                input logic[31:0] RD1D, RD2D,
                input logic[4:0] RsD, RtD, RdD,
                input logic[31:0] SignImmD,
                input logic[31:0] PCPlus4D,
                    output logic RegWriteE, MemtoRegE, MemWriteE,
                    output logic[2:0] AluControlE,
                    output logic AluSrcE, RegDstE, BranchE,
                    output logic[31:0] RD1E, RD2E,
                    output logic[4:0] RsE, RtE, RdE,
                    output logic[31:0] SignImmE,
                    output logic[31:0] PCPlus4E);

    always_ff @(posedge clk, posedge reset)begin
//uygar aras 22103277 lab5 cs224-04
        if(reset || clr)
        begin
            // handle control unit signals
            RegWriteE <= 0;
            MemtoRegE <= 0;
            MemWriteE <= 0;
            AluControlE <= 0;
            AluSrcE <= 0;
            RegDstE <= 0;
            BranchE <= 0;

            // handle mux signals for forwarding
            RD1E <= 0;
            RD2E <= 0;

            // handle registers
            RsE <= 0;
            RtE <= 0;
            RdE <= 0;

            // sign extended immediate
            SignImmE <= 0;

            // propagate PC
            PCPlus4E <= 0;
        end
        else
        begin
            // handle control unit signals
            RegWriteE <= RegWriteD;
            MemtoRegE <= MemtoRegD;
            MemWriteE <= MemWriteD;
            AluControlE <= AluControlD;
            AluSrcE <= AluSrcD;
            RegDstE <= RegDstD;
            BranchE <= BranchD;
//uygar aras 22103277 lab5 cs224-04
            // handle mux signals for forwarding
            RD1E <= RD1D;
            RD2E <= RD2D;

            // handle registers
            RsE <= RsD;
            RtE <= RtD;
            RdE <= RtD;

            // sign extended immediate
            SignImmE <= SignImmD;

            // propagate PC
            PCPlus4E <= PCPlus4D;
        end

    end
endmodule

//uygar aras 22103277 lab5 cs224-04
module PipeEtoM(input logic clk, reset, 
                input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic [31:0] ALUOutE, WriteDataE,
                input logic [4:0] WriteRegE,
                output logic RegWriteM, MemtoRegM, MemWriteM,
                output logic [31:0] ALUOutM, WriteDataM,
                output logic [4:0] WriteRegM);
                
    always_ff @ (posedge clk)
        begin
            // If reset, set everything 0
            if (reset) 
                begin
                    RegWriteM <= 0;
                    MemtoRegM <= 0;
                    MemWriteM <= 0;
                    ALUOutM <= 32'd0;
                    WriteDataM <= 32'd0;
                    WriteRegM <= 5'd0;
                end
            // else, propogate data
            else
                begin
                    RegWriteM <= RegWriteE;
                    MemtoRegM <= MemtoRegE;
                    MemWriteM <= MemWriteE;
                    ALUOutM <= ALUOutE;
                    WriteDataM <= WriteDataE;
                    WriteRegM <= WriteRegE;
                end
            
        end

endmodule

always_ff @(posedge clk, posedge reset) begin
    if (reset) begin
        // reset the output signals
        RegWriteM <= 0;
        MemtoRegM <= 0;
        MemWriteM <= 0;
        BranchM <= 0;
        ZeroM <= 0;
        ALUOutM <= 0;
        WriteDataM <= 0;
        WriteRegM <= 0;
        PCBranchM <= 0;
    end
    else begin
        // update the output signals
        RegWriteM <= RegWriteE;
        MemtoRegM <= MemtoRegE;
        MemWriteM <= MemWriteE;
        BranchM <= BranchE;
        ZeroM <= Zero;
        ALUOutM <= ALUOut;
        WriteDataM <= WriteDataE;
        WriteRegM <= WriteRegE;
        PCBranchM <= PCBranchE;
    end
end

endmodule
//uygar aras 22103277 lab5 cs224-04
//uygar aras 22103277 lab5 cs224-04
module PipeMtoW(
    input logic clk, reset, 
    input logic[31:0] ReadDataM, ALUOutM,
    input logic[4:0] WriteRegM,
    input logic RegWriteM, MemtoRegM,
    output logic RegWriteW, MemtoRegW,
    output logic[31:0] ReadDataW, ALUOutW,
    output logic[4:0] WriteRegW
);

    always_ff @(posedge clk, posedge reset) begin
        // ******************* MY CODE STARTS ************************** /////
        if (reset) begin
            // reset all signals
            // control unit signals
            RegWriteW <= 0;
            MemtoRegW <= 0;

            // memory stage values
            ReadDataW <= 0;
            ALUOutW <= 0;
            WriteRegW <= 0;
        end
        else begin
            // control unit signals
            RegWriteW <= RegWriteM;
            MemtoRegW <= MemtoRegM;

            // memory stage values
            ReadDataW <= ReadDataM;
            ALUOutW <= ALUOutM;
            WriteRegW <= WriteRegM;
        end
    end
endmodule



module datapath (input  logic clk, reset,
		         input logic [31:0] PCF, instr,
		         input logic RegWriteD, MemtoRegD, MemWriteD,
		         input logic [2:0] ALUControlD,
		         input logic AluSrcD, RegDstD, BranchD,
		             output logic PCSrcM, StallD, StallF,
		             output logic[31:0] PCBranchM, PCPlus4F, instrD, ALUOut, ResultW, WriteDataM);



	logic ForwardAD, ForwardBD,  FlushE;
	logic [1:0] ForwardAE, ForwardBE;
    logic Zero, RegWriteE, MemtoRegE, MemWriteE;
    logic AluSrcE, RegDstE, BranchE;
    logic [4:0] WriteRegE, WriteRegM, WriteRegW;
    logic RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM;
    logic [31:0] ReadDataM, ReadDataW, ALUOut,
    logic RegWriteW, MemtoRegW;

	assign PCSrcM = BranchM & ZeroM;
	assign RsD = instrD[25:21];
    assign RtD = instrD[20:16];
    assign RdD = instrD[15:11];
    assign WriteDataE = WriteDataENew;
  //uygar aras 22103277 lab5 cs224-04
//uygar aras 22103277 lab5 cs224-04


	PipeFtoD ftd(instr, PCPlus4F, StallD, clk, reset, instrD, PCPlus4D);

	regfile rf (clk, RegWriteW, instrD[25:21], instrD[20:16],
            WriteRegW, ResultW, RD1D, RD2D);

    adder adderPC(PCF, 4, PCPlus4F);


    signext signExt(instrD[15:0], SignImmD);


    PipeDtoE dte(clr, clk, reset, RegWriteD, MemtoRegD, MemWriteD,
                    AluControlD,
                    AluSrcD, RegDstD, BranchD,
                    RD1D, RD2D,
                    RsD, RtD, RdD,
                    SignImmD,
                    PCPlus4D,
                    RegWriteE, MemtoRegE, MemWriteE,
                    AluControlE,
                    AluSrcE, RegDstE, BranchE,
                    RD1E, RD2E,
                    RsE, RtE, RdE,
                    SignImmE,
                    PCPlus4E);


    mux2 #(5) mux2EWriteReg(RtE, RdE,
                  RegDstE,
                  WriteRegE);
//uygar aras 22103277 lab5 cs224-04
    mux2 #(32) mux2ESrcBE(WriteDataE, SignImmE,
                AluSrcE,
                SrcBE);

//uygar aras 22103277 lab5 cs224-04
    mux4 #(32) mux3ESrcAE(RD1E, ResultW, ALUOutM, 0,
                  ForwardAE,
                  SrcAE);

    mux4 #(32) mux3EWriteDataE(RD2E, ResultW, ALUOutM, 0,
                ForwardBE,
                WriteDataE);
//uygar aras 22103277 lab5 cs224-04_
//uygar aras 22103277 lab5 cs224-04
    sl2 shiftSignImmE(SignImmE,
                SignImmEShifted);


    adder adderPCBranchM(SignImmEShifted, PCPlus4E, PCBranchE);


    alu alu1(SrcAE, SrcBE,
               AluControlE,
               ALUOut,
               Zero, reset);

    PipeEtoM etm( clk, reset, RegWriteE, MemtoRegE, MemWriteE, BranchE, Zero,
                    ALUOut,
                    WriteDataE,
                    WriteRegE,
                    PCBranchE,
                    RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
                    ALUOutM,
                    WriteDataM,
                    WriteRegM,
                    PCBranchM);
//uygar aras 22103277 lab5 cs224-04

    dmem dataMemory( clk, MemWriteM,
                 ALUOutM, WriteDataM,
                 ReadDataM);

    PipeMtoW mtw(clk, reset, RegWriteM, MemtoRegM,
                    ReadDataM, ALUOutM,
                    WriteRegM,
                    RegWriteW, MemtoRegW,
                    ReadDataW, ALUOutW,
                    WriteRegW);


    mux2 #(32) mux2WResultW(ALUOutW, ReadDataW,
                MemtoRegW,
                ResultW);

//uygar aras 22103277 lab5 cs224-04
endmodule




module HazardUnit( input logic RegWriteW,
                input logic [4:0] WriteRegW,
                input logic RegWriteM,MemToRegM,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF);
//uygar aras 22103277 lab5 cs224-04
    logic lwstall;
    always_comb begin

        lwstall = ((rsD == rtE) | (rtD == rtE)) & MemtoRegE;
        StallF = lwstall;
        StallD = lwstall;
        FlushE = lwstall;

//uygar aras 22103277 lab5 cs224-04
//uygar aras 22103277 lab5 cs224-04
        if ((rsE != 0) & (rsE == WriteRegM) & RegWriteM)
        begin
         ForwardAE = 2'b10;
        end
        else if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW)
        begin
            ForwardAE = 2'b01;
        end
        else
            ForwardAE = 2'b00;

    end

endmodule

//uygar aras 22103277 lab5 cs224-04
module mips (input  logic        clk, reset,
             output logic[31:0]  PCF,
             input  logic[31:0]  instr,
             output logic[31:0]  aluout, resultW,
             output logic[31:0]  instrOut, WriteDataM,
             output logic StallD, StallF);

    logic memtoreg, zero, alusrc, regdst, regwrite, jump, PCSrcM, branch, memwrite;
    logic [31:0] PCPlus4F, PCm, PCBranchM, instrD;
    logic [2:0] alucontrol;
    assign instrOut = instr;


    datapath dp (clk, reset,
    		     PCF, instr,
    		      RegWriteD, MemtoRegD, MemWriteD,
    		      alucontrol,
    		      alusrc, regdst, branch,
    		      PCSrcM, StallD, StallF,
    		      PCBranchM, PCPlus4F, instrD, aluout, resultW, WriteDataM);

    PipeWtoF wtf(PCm,
            1'b1, clk, reset,
            PCF);

    mux2 #(32) pcsrcmux(PCPlus4F, PCBranchM,
                PCSrcM,
                PCm);

endmodule


module imem ( input logic [5:0] addr, output logic [31:0] instr);

	always_comb
	   case ({addr,2'b00})		   	

        8'h00: instr = 32'h20020005;  	// addi $v0, $0, 0x0005
        8'h04: instr = 32'h2003000c;  	// addi $v1, $0, 0x000c
        8'h08: instr = 32'h2067fff7;  	// addi $a3, $v1, 0xfff7
        8'h0c: instr = 32'h00e22025;  	// or $a0, $a3, $v0
        8'h10: instr = 32'h00642824;    // and $a1, $v1, $a0
        8'h14: instr = 32'h00a42820;    // add $a1, $a1, $a0
        8'h18: instr = 32'h10a7000a;    // beq $a1, $a1, $a0
        8'h1c: instr = 32'h0064202a;    // slt $a0, $v1, $a0
        8'h20: instr = 32'h10800001;    // beq $a0, $0, 0x0001
        8'h24: instr = 32'h20050000;    // addi $a1, $0, 0x0000
        8'h28: instr = 32'h00e2202a;    // slt $a0, $a3, $v0
        8'h2c: instr = 32'h00853820;    // add $a3, $a0, $a1
        8'h30: instr = 32'h00e23822;    // sub $a3, $a3, $v0
        8'h34: instr = 32'hac670044;    // sw $a3, 0x0044, $v1
        8'h38: instr = 32'h8c020050;    // lw $v0, 0x0050, $0
        8'h3c: instr = 32'h20040003;    // addi $a0, $0, 3
        8'h40: instr = 32'h20020001;    // addi $v0, $0, 0x0001
        8'h44: instr = 32'hac020054;    // sw $v0, 0x0054, $0
        default:  instr = {32{1'bx}};	// unknown address
        endcase
endmodule


module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite,
         jump, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule



module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];

   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op,
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b110000100; // R-type
      6'b100011: controls <= 9'b101001000; // LW
      6'b101011: controls <= 9'b001010000; // SW
      6'b000100: controls <= 9'b000100010; // BEQ
      6'b001000: controls <= 9'b101000000; // ADDI
      6'b000010: controls <= 9'b000000001; // J
      default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, we3,
                input    logic[4:0]  ra1, ra2, wa3,
                input    logic[31:0] wd3,
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3)
         rf [wa3] <= wd3;

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b,
           input  logic [2:0]  alucont,
           output logic [31:0] result,
           output logic zero, input logic reset);

    always_comb begin
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
        if(reset)
            result <= 0;
        end

    assign zero = (result == 0) ? 1'b1 : 1'b0;

endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);

     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);

     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);

  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset,
	       input logic[WIDTH-1:0] d,
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0;
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,
              input  logic s,
              output logic[WIDTH-1:0] y);

   assign y = s ? d1 : d0;
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s,
              output logic[WIDTH-1:0] y);

   assign y = s[1] ? (s[0] ? d3 : d2) : (s[0] ? d1 : d0);
endmodule