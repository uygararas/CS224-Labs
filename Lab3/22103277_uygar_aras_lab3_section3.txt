Uygar Aras
22103277
CS 224-03


.data
comma: .asciiz ","
message1: .asciiz "Enter the number of nodes: "
message2: .asciiz "Enter a value: \n"
firstB: .asciiz "<"
lastB: .asciiz ">"
newLine: .asciiz "\n"
space: .asciiz " "

.text
    li $v0,4
    la $a0,message1
    syscall 

    li $v0,5
    syscall 

    move $a0, $v0
    move $v1, $v0
    jal createLinkedList
    move $a1, $v0

    la $a0, firstB
    li $v0, 4
    syscall

    move $a0, $a1
    jal printLinkedList

    la $a0, lastB
    li $v0, 4
    syscall
    la $a0, newLine
    li $v0, 4
    syscall

    li $s3,0
    li $s4,0
    move $s0, $a1
    jal begin

    li $v0, 10
    syscall

createLinkedList:
    addi $sp, $sp, -24
    sw $s0, 20($sp)
    sw $s1, 16($sp)
    sw $s2, 12($sp)
    sw $s3, 8($sp)
    sw $s4, 4($sp)
    sw $ra, 0($sp)

    move $s0, $a0
    li $s1, 1

    li $a0, 8
    li $v0, 9
    syscall
    move $s2, $v0
    move $s3, $v0

    li $v0,4
    la $a0,message2
    syscall 

    li $v0,5
    syscall
    move $s4,$v0
    sw $s4, 4($s2)

addNode:
    beq $s1, $s0, allDone
    addi $s1, $s1, 1
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, 0($s2)
    move $s2, $v0
    li $v0,4
    la $a0,message2
    syscall 
    li $v0,5
    syscall
    move $s4,$v0
    sw $s4, 4($s2)
    j addNode

allDone:
    sw $zero, 0($s2)
    move $v0, $s3

    lw $ra, 0($sp)
    lw $s4, 4($sp)
    lw $s3, 8($sp)
    lw $s2, 12($sp)
    lw $s1, 16($sp)
    lw $s0, 20($sp)
    addi $sp, $sp, 24

    jr $ra

printLinkedList:
    addi $sp, $sp, -20
    sw $s0, 16($sp)
    sw $s1, 12($sp)
    sw $s2, 8($sp)
    sw $s3, 4($sp)
    sw $ra, 0($sp)

    move $s0, $a0
    li $s3, 0

printNextNode:
    beq $s0, $zero, printedAll
    lw $s1, 0($s0)
    lw $s2, 4($s0)
    addi $s3, $s3, 1

    move $a0, $s2
    li $v0, 1
    syscall

    la $a0, comma
    li $v0, 4
    syscall

    move $s0, $s1
    j printNextNode

printedAll:
    lw $ra, 0($sp)
    lw $s3, 4($sp)
    lw $s2, 8($sp)
    lw $s1, 12($sp)
    lw $s0, 16($sp)
    addi $sp, $sp, 20
    jr $ra

begin:
    move $s7, $ra
    jal addToStack

addToStack:    
    beq $v1, $s3, returnFromStack
    lw $s1, 0($s0)
    lw $s2, 4($s0)
    addi $sp, $sp, -4
    sw $s2, 0($sp)
    addi $s3, $s3, 1
    move $s0, $s1
    jal addToStack

returnFromStack:
    beq $v1, $s4, done
    lw $s2, 0($sp)
    move $a0, $s2
    li $v0, 1
    syscall 
    la $a0, space
    li $v0, 4
    syscall
    addi $sp, $sp, 4
    addi $s4, $s4, 1
    jal returnFromStack

done:
    move $ra, $s7
    jr $ra
	.text
	.globl __start
__start:
	la $a0, promptRecursiveDivision
	li $v0, 4
	syscall
	la $a0, promptDividend
	syscall
	li $v0, 5
	syscall
	beqz $v0 , end
	move $s0, $v0
	la $a0, promptDivisor
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	beqz $v0 , end
	move $a1, $v0
	move $a0, $s0
	jal recursiveDivision
	move $s0, $a0
	la $a0, resultQuotient
	li $v0, 4
	syscall
	move $a0, $s0
	li $v0, 1
	syscall
	la $a0, resultRemainder
	li $v0, 4
	syscall
	move $a0, $a1
	li $v0, 1
	syscall

	j __start

recursiveDivision:
	subi $sp, $sp, 12
	sw   $a1, 8($sp)
    sw   $a0, 4($sp)
    sw   $ra, 0($sp)
    bgt $a0, $a1, elseDiv
    move $t0, $a0
    addi $a0, $0, 0
    move $a1, $t0
    addi $sp, $sp, 12
    jr  $ra
elseDiv:
	sub $a0, $a0, $a1
	jal recursiveDivision
    lw   $ra, 0($sp)
    addi $sp, $sp, 12
    addi $a0, $a0, 1
	jr $ra

end:
li $v0 ,10
syscall
	.data
promptRecursiveDivision: .asciiz "\nFunction divides 2 numbers returns the quotient and the remainder..."
promptDividend: .asciiz "\nPlease enter the Dividend (dividend > 0): "
promptDivisor: .asciiz "\nPlease enter the Divisor (divisor > 0): "
resultQuotient: .asciiz "\nQuotient: "
resultRemainder: .asciiz "\nRemainder: "
