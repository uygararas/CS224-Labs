#Uygar Aras 
#22103277
#Lab6 Prelim Codes
#Section 4
#CS 224
.data
promptN: .asciiz "Enter the size N for the matrix: \n"
newline: .asciiz "\n"
promptI: .asciiz "Enter the index i: \n"
promptJ: .asciiz "Enter the index j: \n"
resultMsg: .asciiz "The desired element is: "
rowSumMsg: .asciiz "\nSum of matrix by row:    "
colSumMsg: .asciiz "\nSum of matrix by column:    "

.text
li $v0, 4
la $a0, promptN
syscall

li $v0, 5
syscall
#PROPERTY OF UYGAR ARAS
addi $s0, $v0, 0   # Store N value in $s0

mul $t0, $s0, 4   # Number of bytes to be allocated for the matrix
#PROPERTY OF UYGAR ARAS
li $v0, 9
move $a0, $t0
syscall
#PROPERTY OF UYGAR ARAS
move $t1, $v0   # Start of matrix
addi $t2, $t1, 0   # Second iterator
addi $t3, $zero, 0   # Counter
addi $k0, $zero, 0
#PROPERTY OF UYGAR ARAS
matrixLoop:
beq $t3, $s0, endMatrixLoop   # Exit loop if counter equals N
addi $t3, $t3, 1   # Increment counter
addi $t4, $t3, 0   # Set $t4 to the value of counter
addi $k0, $zero, 0
#PROPERTY OF UYGAR ARAS
rowLoop:
beq $k0, $s0, matrixLoop   # Exit row loop if second iterator equals N
sw $t4, 0($t2)   # Store the value of $t4 in the current element of the matrix
add $t4, $t4, $s0   # Increment $t4 by N
addi $t2, $t2, 4   # Increment the memory address of the matrix by 4 bytes
addi $k0, $k0, 1   # Increment second iterator
j rowLoop   # Jump to the beginning of the row loop
#PROPERTY OF UYGAR ARAS
endMatrixLoop:
move $t2, $t1   # Reset $t2 to the start of the matrix
addi $t3, $zero, 0   # Reset counter
move $t4, $t3   # Reset $t4 to 0
move $k0, $t3   # Reset $k0 to 0
#PROPERTY OF UYGAR ARAS
li $v0, 4
la $a0, promptI   # Print the prompt for index i
syscall
#PROPERTY OF UYGAR ARAS
li $v0, 5
syscall
#PROPERTY OF UYGAR ARAS
move $t6, $v0   # Store the value of index i in $t6
#PROPERTY OF UYGAR ARAS
li $v0, 4
la $a0, promptJ   # Print the prompt for index j
syscall
#PROPERTY OF UYGAR ARAS
li $v0, 5
syscall
#PROPERTY OF UYGAR ARAS
move $t7, $v0   # Store the value of index j in $t7
#PROPERTY OF UYGAR ARAS
mul $t9, $s0, 4   # Calculate the number of bytes in a row
subi $t6, $t6, 1   # Decrement index i by 1
mul $t6, $t9, $t6   # Multiply index i by the number of bytes in a row
subi $t7, $t7, 1   # Decrement index j by 1
mul $t7, $t7, 4   # Multiply index j by 4
add $t6, $t6, $t7   # Add the offsets to the start of the matrix
#PROPERTY OF UYGAR ARAS
add $t2, $t2, $t6   # Add the offset to the start of the matrix to get the desired element
#PROPERTY OF UYGAR ARAS
lw $t8, 0($t2)   # Load the desired element from memory into $t8
#PROPERTY OF UYGAR ARAS
li $v0, 4
la $a0, resultMsg   # Print the message for the desired element
syscall
#PROPERTY OF UYGAR ARAS
li $v0, 1
move $a0, $t8
syscall
#PROPERTY OF UYGAR ARAS
mul $t9, $s0, $s0   # Calculate the total number of elements in the matrix
#PROPERTY OF UYGAR ARAS
move $t2, $t1   # Reset $t2 to the start of the matrix
#PROPERTY OF UYGAR ARAS
rowSumLoop:
beq $t3, $t9, endRowSumLoop   # Exit loop if counter equals the total number of elements
lw $t4, 0($t2)   # Load the current element from memory into $t4
add $k0, $k0, $t4   # Add the current element to the running sum
addi $t3, $t3, 1   # Increment counter
addi $t2, $t2, 4   # Increment the memory address of the matrix by 4 bytes
j rowSumLoop   # Jump to the beginning of the loop
#PROPERTY OF UYGAR ARAS
endRowSumLoop:
li $v0, 4
la $a0, newline   # Print a new line
syscall
#PROPERTY OF UYGAR ARAS
li $v0, 4
la $a0, rowSumMsg   # Print the message for the row sum
syscall
#PROPERTY OF UYGAR ARAS
li $v0, 1
move $a0, $k0
syscall
#PROPERTY OF UYGAR ARAS
addi $t3, $zero, 0   # Reset counter
move $t4, $t3   # Reset $t4 to 0
move $k0, $t3   # Reset $k0 to 0
move $t2, $t1   # Reset $t2 to the start of the matrix
move $t6, $t3   # Reset $t6 to 0
#PROPERTY OF UYGAR ARAS
colSumLoop:
beq $t3, $s0, endColSumLoop   # Exit loop if counter equals N
move $t2, $t1   # Reset $t2 to the start of the matrix
mul $t7, $t3, 4   # Multiply counter by 4 to calculate the column offset
add $t2, $t2, $t7   # Add the column offset to the start of the matrix
addi $t3, $t3, 1   # Increment counter
addi $a1, $zero, 0   # Reset secondary counter
#PROPERTY OF UYGAR ARAS
colSumAdd:
beq $a1, $s0, colSumLoop   # Exit secondary loop if secondary counter equals N
lw $t4, 0($t2)   # Load the current element from memory into $t4
add $k0, $k0, $t4   # Add the current element to the running sum
mul $t6, $s0, 4
add $t2, $t2, $t6
addi $a1, $a1, 1
j colSumAdd
#PROPERTY OF UYGAR ARAS
endColSumLoop:
li $v0, 4
la $a0, colSumMsg   # Print the message for the column sum
syscall
#PROPERTY OF UYGAR ARAS
li $v0, 1
move $a0, $k0
syscall

li $v0, 10
syscall
